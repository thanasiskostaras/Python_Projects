In this Project a Hill Climbing local search method was implemented and evaluated. Hill climbing is a mathematical optimization method, and it is a member of the local search family. With this method, an iterative algorithm was built that started with an arbitrary solution to the knapsack problem, and then it was attempted to find a better answer by making an incremental change to the initial solution. If the change produced a better solution, another gradual change was made to the new solution, and so on until no further improvements could be found.
After essential libraries for this problem were imported in Python, the parameters for the problem were defined. We chose to use the same weights and profits as in Task 2 and 3, to make comparisons easier. Also, the mathematical equation that described the capacities was constructed. A function that generates a random list of numbers from 0 to 1 was developed. Another function that should be built for the implementation of this local search heuristic was a function that swapped two random numbers from two random indexes in a list. In this stage, we were ready to start building our heuristic approach. Firstly, a random initial solution that not violate the constraints was created.
Then by iterating several times (100) through the list, two random numbers were generated. Then the swap operator was used if one of these numbers were 0. If so, the position of number changed and was estimated if the new profit was greater or equal from the previous profit and the constraints are not violated. Then, the new profit was extracted. Otherwise, we returned the previous one. The last procedure in this local heuristic was to check if the numbers that we chose randomly was 1. If something like this would have happened, we would implement the swap operator again and tried to estimate if there is any better position to put these numbers. Then, if this solution would not have exceeded the constraints again, this profit would returned. Otherwise, the previous best profit and the initial would be printed with the corresponding list of items.In average, our local search Heuristic improved roughly 52.6 % the initial profit, which was a reasonably good proportion.
As we wanted to have a more in-depth approach in this heuristic, an artificial data-set was created. The reason for this was that the algorithm worked reasonably good for a small number of weights, but we thought that this is a very small data-set to evaluate such an algorithm. The data-set contained 1000 weights with random numbers from 5 to 15 and 1000 profits with random numbers from 50 to 150. A different number of iterations were applied several times, and the average of them was calculated to evaluate the algorithm. From the plot of Figure 6 it is observed that the Hill Climbing method improves the initial solution significantly when we iterated through the list 100 to 20.000 times. Even though, the improvement was slightly for a bigger number of iterations. This is because the number of iterations is good enough to estimate the right list for a better final solution.


